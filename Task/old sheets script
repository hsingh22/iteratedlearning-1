//  1. Enter sheet name where data is to be written below
var SHEET_NAME = "Sheet1";
var STALE_MINUTES = 30; 
         
//  2. Run > setup
//
//  3. Publish > Deploy as web app 
//    - enter Project Version name and click 'Save New Version' 
//    - set security level and enable service (most likely execute as 'me' and access 'anyone, even anonymously) 
//
//  4. Copy the 'Current web app URL' and post this in your form/script action 
//
//  5. Insert column names on your destination sheet matching the parameter names of the data you are passing in (exactly matching case)
 
var SCRIPT_PROP = PropertiesService.getScriptProperties(); // new property service

// If you don't want to expose either GET or POST methods you can comment out the appropriate function
function doGet(e){
  var lock = LockService.getScriptLock();
  lock.waitLock(15000);  // wait 15 seconds before conceding defeat.
  
  try {
    var doc = SpreadsheetApp.openById(SCRIPT_PROP.getProperty("key"));
    var sheet = doc.getSheetByName(SHEET_NAME);
    
    // we'll assume header is in row 1 but you can override with header_row in GET/POST data
    var headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];  
    
    var available_column = headers.indexOf("available")+1;
    
    var available = sheet.getRange(2, available_column, sheet.getLastRow()).getValues();
  
    for (i in available){
      if (available[i][0] == 1){ //the first available row when load screen
        var next_row = parseInt(i)+2;
        var data = sheet.getRange(next_row, 1, 1, sheet.getLastColumn()).getValues()[0]; //get the data
        
        sheet.getRange(next_row, available_column).setValue(new Date()) // set the available bit to current date
        break;
      } else { // else use header name to get data
        var data = 0;
      }
    }
    
    return ContentService
    .createTextOutput(JSON.stringify(data))
    .setMimeType(ContentService.MimeType.JSON);
  } catch(e){
    // if error return this
    return ContentService
          .createTextOutput(JSON.stringify({"result":"error", "error": e}))
          .setMimeType(ContentService.MimeType.JSON);
 } finally { //release lock
    lock.releaseLock();
 }
}
 
function doPost(e){
  var lock = LockService.getScriptLock();
  lock.waitLock(15000);  // wait 15 seconds before conceding defeat.
   
  try {
    var doc = SpreadsheetApp.openById(SCRIPT_PROP.getProperty("key"));
    var sheet = doc.getSheetByName(SHEET_NAME);
     
    var headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];  
    
    var available_column = headers.indexOf("available")+1;
    var parent_column = headers.indexOf("unique_id")+1;
    
    //update parent to unavailable
    var parents = sheet.getRange(2, parent_column, sheet.getLastRow()-1).getValues();
    
    for (i in parents){
      if (parents[i][0] == e.parameter["parent_id"]){ //the parent of this participant
        var parent_row = parseInt(i)+2;
        sheet.getRange(parent_row, available_column).setValue(0) // set to unavailable
        sheet.getRange(parent_row, available_column).setNumberFormat("0");
        break;
      }
    } 
   
    //now post data
    var nextRow = sheet.getLastRow()+1; // get next row
    var row = []; 
    // loop through the header columns
    for (i in headers){
    //use header name to get data
      row.push(e.parameter[headers[i]]);
    }
    sheet.getRange(nextRow, 1, 1, row.length).setValues([row]);
    // return json success results
    return ContentService
          .createTextOutput(JSON.stringify({"result":"success", "row": nextRow}))
          .setMimeType(ContentService.MimeType.JSON);
  } catch(e){
    // if error return this
    return ContentService
          .createTextOutput(JSON.stringify({"result":"error", "error": e}))
          .setMimeType(ContentService.MimeType.JSON);
  } finally { //release lock
    lock.releaseLock();
  }
}

/**
 * Set any stale rows back to available
 */
function checkStale() {
  var lock = LockService.getScriptLock();
  lock.waitLock(30000);  // wait 30 seconds before conceding defeat.
  
  try {
    var doc = SpreadsheetApp.openById(SCRIPT_PROP.getProperty("key"));
    var sheet = doc.getSheetByName(SHEET_NAME);
    
    var headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];  
    
    var available_column = headers.indexOf("available")+1;
    
    var available = sheet.getRange(2, available_column, sheet.getLastRow()-1).getValues();  
    
    for (i in available){
      if (available[i][0] != 0 && available[i][0] != 1){ //there is a date
        date_diff = date_diff_minutes( available[i][0], new Date()); //get difference in minutes
        
        if(date_diff > STALE_MINUTES) {
          sheet.getRange(parseInt(i)+2, available_column, 1, 1).setValue( 1 );
          sheet.getRange(parseInt(i)+2, available_column, 1, 1).setNumberFormat("0");
        }
      }
    }
  }
  catch(e){
  } finally { //release lock
    lock.releaseLock();
 } 
}

function date_diff_minutes (d1, d2) {
  var diff = d2 - d1;
  return parseInt(diff / (60*1000));
}

function setup() {
    var doc = SpreadsheetApp.getActiveSpreadsheet();
    SCRIPT_PROP.setProperty("key", doc.getId());
  
    ScriptApp.newTrigger('checkStale')
      .timeBased()
      .everyMinutes(10)
      .create();
  
}